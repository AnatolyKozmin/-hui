#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import os
from dotenv import load_dotenv
import asyncpg

load_dotenv()


async def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    database_url = os.getenv("DATABASE_URL", "asyncpg+postgresql://otb:1234@postgres:5432/otb_db")
    asyncpg_url = database_url.replace("asyncpg+", "")
    
    print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    conn = await asyncpg.connect(asyncpg_url)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É faculties
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã faculties...")
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS faculties (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL UNIQUE,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É faculty_admins
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã faculty_admins...")
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS faculty_admins (
                id SERIAL PRIMARY KEY,
                faculty_id INTEGER REFERENCES faculties(id) ON DELETE CASCADE,
                telegram_id BIGINT NOT NULL UNIQUE,
                name VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É faculty_sheets
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã faculty_sheets...")
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS faculty_sheets (
                id SERIAL PRIMARY KEY,
                faculty_id INTEGER REFERENCES faculties(id) ON DELETE CASCADE,
                kind VARCHAR(50) NOT NULL,
                spreadsheet_id VARCHAR(255) NOT NULL,
                sheet_name VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(faculty_id, kind)
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É participants
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã participants...")
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS participants (
                id SERIAL PRIMARY KEY,
                faculty_id INTEGER REFERENCES faculties(id) ON DELETE CASCADE,
                vk_id BIGINT,
                first_name VARCHAR(255),
                last_name VARCHAR(255),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É interviewers
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã interviewers...")
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS interviewers (
                id SERIAL PRIMARY KEY,
                faculty_id INTEGER REFERENCES faculties(id) ON DELETE CASCADE,
                telegram_id BIGINT,
                name VARCHAR(255) NOT NULL,
                tab_name VARCHAR(255),
                invite_token VARCHAR(255) UNIQUE,
                is_registered BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_faculty_admins_telegram_id ON faculty_admins(telegram_id)")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_interviewers_telegram_id ON interviewers(telegram_id)")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_interviewers_invite_token ON interviewers(invite_token)")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_participants_vk_id ON participants(vk_id)")
        
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        for table in tables:
            print(f"  ‚úÖ {table['table_name']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüå± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        faculty_id = await conn.fetchval("""
            INSERT INTO faculties (name, description) 
            VALUES ('–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–§–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã')
            ON CONFLICT (name) DO UPDATE SET description = EXCLUDED.description
            RETURNING id
        """)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç (ID: {faculty_id})")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        admin_id = await conn.fetchval("""
            INSERT INTO faculty_admins (faculty_id, telegram_id, name) 
            VALUES ($1, $2, '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω')
            ON CONFLICT (telegram_id) DO UPDATE SET name = EXCLUDED.name
            RETURNING id
        """, faculty_id, 922109605)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω (ID: {admin_id})")
        
        print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        raise
    finally:
        await conn.close()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await create_tables()


if __name__ == "__main__":
    asyncio.run(main())
