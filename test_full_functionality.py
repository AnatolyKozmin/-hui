#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞
"""

import os
import asyncio
from dotenv import load_dotenv

from database.dao import FacultyDAO, FacultyAdminDAO, FacultySheetDAO, InterviewerDAO
from database.engine import sessionmaker
from database.models import SheetKind
from services.gspread_client import GSpreadClient
from services.redis_client import RedisClient

load_dotenv()


async def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        async with sessionmaker() as session:
            faculty_dao = FacultyDAO(session)
            faculties = await faculty_dao.get_all()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç. –§–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(faculties)}")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False


async def test_google_sheets_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets...")
    
    try:
        gs_client = GSpreadClient()
        print("‚úÖ GSpreadClient —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GSpreadClient: {e}")
        return False


async def test_redis_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...")
    
    try:
        redis_client = RedisClient()
        await redis_client.set("test_key", "test_value")
        value = await redis_client.get("test_key")
        await redis_client.delete("test_key")
        
        if value == "test_value":
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Redis")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        return False


async def test_faculty_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞...")
    
    try:
        async with sessionmaker() as session:
            faculty_dao = FacultyDAO(session)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
            faculty = await faculty_dao.create("test_faculty", "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
            print(f"‚úÖ –§–∞–∫—É–ª—å—Ç–µ—Ç —Å–æ–∑–¥–∞–Ω: {faculty.title} (ID: {faculty.id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
            retrieved = await faculty_dao.get_by_id(faculty.id)
            if retrieved:
                print(f"‚úÖ –§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: {retrieved.title}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
            await faculty_dao.delete(faculty.id)
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç —É–¥–∞–ª–µ–Ω")
            
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤: {e}")
        return False


async def test_interviewer_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ...")
    
    try:
        async with sessionmaker() as session:
            faculty_dao = FacultyDAO(session)
            sheet_dao = FacultySheetDAO(session)
            interviewer_dao = InterviewerDAO(session)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
            faculty = await faculty_dao.create("test_interviewer_faculty", "–§–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            sheet = await sheet_dao.create(faculty.id, SheetKind.OPYT, "test_spreadsheet_id")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ
            interviewer = await interviewer_dao.create(
                faculty.id, 
                sheet.id, 
                "–¢–µ—Å—Ç–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–π", 
                SheetKind.OPYT, 
                "test_token_123"
            )
            
            print(f"‚úÖ –°–æ–±–µ—Å–µ–¥—É—é—â–∏–π —Å–æ–∑–¥–∞–Ω: {interviewer.tab_name} (ID: {interviewer.id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–æ–∫–µ–Ω—É
            found = await interviewer_dao.get_by_invite_token("test_token_123")
            if found:
                print(f"‚úÖ –°–æ–±–µ—Å–µ–¥—É—é—â–∏–π –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–æ–∫–µ–Ω—É: {found.tab_name}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await interviewer_dao.delete(interviewer.id)
            await sheet_dao.delete(sheet.id)
            await faculty_dao.delete(faculty.id)
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
            
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö: {e}")
        return False


async def test_redis_tokens():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ Redis"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ Redis...")
    
    try:
        redis_client = RedisClient()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        token = await redis_client.generate_invite_token(1, 1)
        print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {token[:20]}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
        data = await redis_client.get_invite_data(token)
        if data:
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—É—á–µ–Ω—ã: {data}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
        await redis_client.delete_invite_token(token)
        print("‚úÖ –¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞\n")
    
    tests = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database_connection),
        ("Google Sheets", test_google_sheets_connection),
        ("Redis", test_redis_connection),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤", test_faculty_creation),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö", test_interviewer_creation),
        ("–¢–æ–∫–µ–Ω—ã Redis", test_redis_tokens),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:.<30} {status}")
        if result:
            passed += 1
    
    print("="*50)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(results)}")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google Sheets credentials")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã —á–µ—Ä–µ–∑ /superadmin")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö")
    print("5. –°–æ–∑–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")


if __name__ == "__main__":
    asyncio.run(main())
