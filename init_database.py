#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ asyncpg
"""

import asyncio
import os
import sys
from dotenv import load_dotenv
import asyncpg

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


async def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    database_url = os.getenv("DATABASE_URL", "asyncpg+postgresql://otb:1234@postgres:5432/otb_db")
    asyncpg_url = database_url.replace("asyncpg+", "")
    
    print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    print(f"URL: {asyncpg_url}")
    
    try:
        conn = await asyncpg.connect(asyncpg_url)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É faculties
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã faculties...")
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS faculties (
                id SERIAL PRIMARY KEY,
                slug VARCHAR(64) UNIQUE NOT NULL,
                title VARCHAR(256) NOT NULL,
                is_active BOOLEAN DEFAULT TRUE NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É faculty_admins
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã faculty_admins...")
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS faculty_admins (
                id SERIAL PRIMARY KEY,
                faculty_id INTEGER REFERENCES faculties(id) ON DELETE CASCADE,
                telegram_user_id BIGINT NOT NULL,
                is_superadmin BOOLEAN DEFAULT FALSE NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(faculty_id, telegram_user_id)
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É faculty_sheets
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã faculty_sheets...")
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS faculty_sheets (
                id SERIAL PRIMARY KEY,
                faculty_id INTEGER REFERENCES faculties(id) ON DELETE CASCADE,
                kind VARCHAR(50) NOT NULL,
                spreadsheet_id VARCHAR(128) NOT NULL,
                sheet_name VARCHAR(128),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(faculty_id, kind)
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É participants
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã participants...")
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS participants (
                id SERIAL PRIMARY KEY,
                faculty_id INTEGER REFERENCES faculties(id) ON DELETE CASCADE,
                vk_id BIGINT NOT NULL,
                first_name VARCHAR(128) NOT NULL,
                last_name VARCHAR(128) NOT NULL,
                is_name_verified BOOLEAN DEFAULT FALSE NOT NULL,
                tg_id BIGINT,
                tg_username VARCHAR(64),
                source_sheet_id INTEGER REFERENCES faculty_sheets(id) ON DELETE SET NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(faculty_id, vk_id)
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É interviewers
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã interviewers...")
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS interviewers (
                id SERIAL PRIMARY KEY,
                faculty_id INTEGER REFERENCES faculties(id) ON DELETE CASCADE,
                faculty_sheet_id INTEGER REFERENCES faculty_sheets(id) ON DELETE CASCADE,
                tab_name VARCHAR(128) NOT NULL,
                experience_kind VARCHAR(50) NOT NULL,
                invite_token VARCHAR(64) NOT NULL UNIQUE,
                tg_id BIGINT,
                tg_username VARCHAR(64),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(faculty_sheet_id, tab_name),
                UNIQUE(tg_id)
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_faculty_admins_telegram_user_id ON faculty_admins(telegram_user_id)")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_interviewers_tg_id ON interviewers(tg_id)")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_interviewers_invite_token ON interviewers(invite_token)")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_participants_vk_id ON participants(vk_id)")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_participants_tg_id ON participants(tg_id)")
        
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        for table in tables:
            print(f"  ‚úÖ {table['table_name']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüå± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        faculty_id = await conn.fetchval("""
            INSERT INTO faculties (slug, title) 
            VALUES ('test-faculty', '–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç')
            ON CONFLICT (slug) DO UPDATE SET title = EXCLUDED.title
            RETURNING id
        """)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç (ID: {faculty_id})")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        admin_id = await conn.fetchval("""
            INSERT INTO faculty_admins (faculty_id, telegram_user_id, is_superadmin) 
            VALUES ($1, $2, TRUE)
            ON CONFLICT (faculty_id, telegram_user_id) DO UPDATE SET is_superadmin = EXCLUDED.is_superadmin
            RETURNING id
        """, faculty_id, 922109605)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω (ID: {admin_id})")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–∏—Å—Ç—ã
        sheet_kinds = ["ne_opyt", "opyt", "svod"]
        for kind in sheet_kinds:
            sheet_id = await conn.fetchval("""
                INSERT INTO faculty_sheets (faculty_id, kind, spreadsheet_id, sheet_name) 
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (faculty_id, kind) DO UPDATE SET spreadsheet_id = EXCLUDED.spreadsheet_id
                RETURNING id
            """, faculty_id, kind, f"test_{kind}_sheet_id", f"test_{kind}_sheet")
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç {kind} (ID: {sheet_id})")
        
        print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        await conn.close()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        sys.exit(1)
    
    print(f"‚úÖ DATABASE_URL: {database_url}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await create_tables()
    
    if success:
        print("\nüéâ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        print("‚úÖ –ë–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω")
        sys.exit(0)
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò!")
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
