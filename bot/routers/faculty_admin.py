from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from database.dao import FacultyDAO, FacultyAdminDAO, FacultySheetDAO, InterviewerDAO
from database.engine import sessionmaker
from database.models import SheetKind, Interviewer
from services.auth import AuthService
from services.gspread_client import GSpreadClient
from services.redis_client import CacheKeys, RedisClient


def setup_faculty_admin_router(redis_client: RedisClient, gs_client: GSpreadClient, bot) -> Router:
    router = Router()

    def faculty_admin_menu_kb() -> InlineKeyboardMarkup:
        buttons = [
            [InlineKeyboardButton(text="üë• –°–æ–±–µ—Å–µ–¥—É—é—â–∏–µ", callback_data="faculty|interviewers")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–æ–¥—è—â–∏—Ö", callback_data="faculty|add_interviewers")],
            [InlineKeyboardButton(text="–ò–º–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="faculty|import_participants")],
            [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç—ã", callback_data="faculty|manage_slots")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @router.callback_query(F.data == "faculty_admin_menu")
    async def show_faculty_admin_menu(callback: CallbackQuery) -> None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        async with sessionmaker() as session:
            admin_dao = FacultyAdminDAO(session)
            admin = await admin_dao.get_by_telegram_id(callback.from_user.id)
            
            if not admin and not AuthService.is_superadmin(callback.from_user.id):
                await callback.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                return
        
        await callback.message.edit_text(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:\n\n"
            "‚Ä¢ –°–æ–±–µ—Å–µ–¥—É—é—â–∏–µ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–º–∏\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–æ–¥—è—â–∏—Ö - –ø–∞—Ä—Å–∏–Ω–≥ –ª–∏—Å—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü opyt/ne_opyt\n"
            "‚Ä¢ –ò–º–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã svod\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π",
            reply_markup=faculty_admin_menu_kb()
        )
        await callback.answer()

    @router.callback_query(F.data == "faculty|add_interviewers")
    async def cb_add_interviewers(callback: CallbackQuery) -> None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        async with sessionmaker() as session:
            admin_dao = FacultyAdminDAO(session)
            admin = await admin_dao.get_by_telegram_id(callback.from_user.id)
            
            if not admin and not AuthService.is_superadmin(callback.from_user.id):
                await callback.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
                return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        if admin:
            faculty_id = admin.faculty_id
            await parse_interviewers_for_faculty(callback, faculty_id)
        else:
            # –ï—Å–ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
            async with sessionmaker() as session:
                faculty_dao = FacultyDAO(session)
                faculties = await faculty_dao.get_all()
            
            buttons = []
            for faculty in faculties:
                buttons.append([
                    InlineKeyboardButton(
                        text=faculty.title,
                        callback_data=f"parse_faculty|{faculty.id}"
                    )
                ])
            buttons.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
            await callback.answer()

    @router.callback_query(F.data.startswith("parse_faculty|"))
    async def cb_parse_faculty(callback: CallbackQuery) -> None:
        if not AuthService.is_superadmin(callback.from_user.id):
            await callback.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return

        faculty_id = int(callback.data.split("|")[1])
        await parse_interviewers_for_faculty(callback, faculty_id)

    async def parse_interviewers_for_faculty(callback: CallbackQuery, faculty_id: int) -> None:
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏–∑ Google Sheets"""
        async with sessionmaker() as session:
            faculty_dao = FacultyDAO(session)
            sheet_dao = FacultySheetDAO(session)
            interviewer_dao = InterviewerDAO(session)
            
            faculty = await faculty_dao.get_by_id(faculty_id)
            sheets = await sheet_dao.get_by_faculty(faculty_id)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö
        ne_opyt_sheet = next((s for s in sheets if s.kind == SheetKind.NE_OPYT), None)
        opyt_sheet = next((s for s in sheets if s.kind == SheetKind.OPYT), None)
        
        if not ne_opyt_sheet and not opyt_sheet:
            await callback.message.edit_text(
                f"‚ùå –î–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ '{faculty.title}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö.\n\n"
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞: /superadmin",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="faculty|back")]
                ])
            )
            await callback.answer()
            return
        
        # –ü–∞—Ä—Å–∏–º —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü
        all_interviewers = []
        
        for sheet, sheet_kind in [(ne_opyt_sheet, SheetKind.NE_OPYT), (opyt_sheet, SheetKind.OPYT)]:
            if not sheet:
                continue
                
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                worksheet_titles = gs_client.list_worksheet_titles(sheet.spreadsheet_id)
                
                for tab_name in worksheet_titles:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–π
                    existing = await interviewer_dao.get_by_faculty_and_tab_name(faculty_id, tab_name)
                    if existing:
                        continue
                    
                    all_interviewers.append({
                        "tab_name": tab_name,
                        "sheet_kind": sheet_kind,
                        "faculty_sheet_id": sheet.id,
                        "faculty_id": faculty_id
                    })
                    
            except Exception as e:
                await callback.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {sheet_kind.value}: {e}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="faculty|back")]
                    ])
                )
                await callback.answer()
                return
        
        if not all_interviewers:
            await callback.message.edit_text(
                f"‚úÖ –í—Å–µ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–µ –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ '{faculty.title}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="faculty|back")]
                ])
            )
            await callback.answer()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        saved_count = 0
        for interviewer_data in all_interviewers:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                token = await redis_client.generate_invite_token(
                    interviewer_data["faculty_id"], 
                    interviewer_data["faculty_id"]
                )
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ –≤ –±–∞–∑–µ
                async with sessionmaker() as session:
                    interviewer_dao = InterviewerDAO(session)
                    await interviewer_dao.create(
                        interviewer_data["faculty_id"],
                        interviewer_data["faculty_sheet_id"],
                        interviewer_data["tab_name"],
                        interviewer_data["sheet_kind"],
                        token
                    )
                    saved_count += 1
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ {interviewer_data['tab_name']}: {e}")
        
        await callback.message.edit_text(
            f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {faculty.title}\n"
            f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö: {len(all_interviewers)}\n"
            f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É: {saved_count}\n\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 'üë• –°–æ–±–µ—Å–µ–¥—É—é—â–∏–µ'",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë• –°–æ–±–µ—Å–µ–¥—É—é—â–∏–µ", callback_data="faculty|interviewers")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="faculty|back")]
            ])
        )
        await callback.answer()

    @router.callback_query(F.data.startswith("create_invite|"))
    async def cb_create_invite(callback: CallbackQuery) -> None:
        if not AuthService.is_superadmin(callback.from_user.id):
            await callback.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return
        
        try:
            _, faculty, sheet_type, interviewer_name = callback.data.split("|", 3)
        except ValueError:
            await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        # Generate invite token and store in Redis
        import secrets
        token = secrets.token_urlsafe(12)
        
        invite_data = {
            "faculty": faculty,
            "sheet_type": sheet_type,
            "interviewer_name": interviewer_name,
            "created_by": callback.from_user.id,
            "created_at": str(callback.message.date)
        }
        
        await redis_client.set_json(CacheKeys.INVITES.format(token=token), invite_data, ex=86400)  # 24h
        
        # Get bot username
        bot_username = await redis_client.get(CacheKeys.BOT_USERNAME)
        if not bot_username:
            # TODO: Get from bot instance
            bot_username = "your_bot_username"
        
        invite_link = f"https://t.me/{bot_username}?start=inv_{token}"
        
        await callback.message.answer(
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è {interviewer_name} ({sheet_type}):\n\n{invite_link}\n\n"
            f"–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞."
        )
        await callback.answer()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–±–µ—Å–µ–¥—É—é—â–∏–µ"
    @router.callback_query(F.data == "faculty|interviewers")
    async def cb_manage_interviewers(callback: CallbackQuery) -> None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        async with sessionmaker() as session:
            admin_dao = FacultyAdminDAO(session)
            admin = await admin_dao.get_by_telegram_id(callback.from_user.id)
            
            if not admin and not AuthService.is_superadmin(callback.from_user.id):
                await callback.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
                return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö –µ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        if admin:
            faculty_id = admin.faculty_id
        else:
            # –ï—Å–ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
            faculty_dao = FacultyDAO(session)
            faculties = await faculty_dao.get_all()
            
            buttons = []
            for faculty in faculties:
                buttons.append([
                    InlineKeyboardButton(
                        text=faculty.title,
                        callback_data=f"interviewers_faculty|{faculty.id}"
                    )
                ])
            buttons.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–º–∏:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
            await callback.answer()
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        await show_faculty_interviewers(callback, faculty_id)

    @router.callback_query(F.data.startswith("interviewers_faculty|"))
    async def cb_show_faculty_interviewers(callback: CallbackQuery) -> None:
        if not AuthService.is_superadmin(callback.from_user.id):
            await callback.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return

        faculty_id = int(callback.data.split("|")[1])
        await show_faculty_interviewers(callback, faculty_id)

    async def show_faculty_interviewers(callback: CallbackQuery, faculty_id: int) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"""
        async with sessionmaker() as session:
            faculty_dao = FacultyDAO(session)
            interviewer_dao = InterviewerDAO(session)
            
            faculty = await faculty_dao.get_by_id(faculty_id)
            interviewers = await interviewer_dao.get_by_faculty(faculty_id)

        if not interviewers:
            await callback.message.edit_text(
                f"–°–æ–±–µ—Å–µ–¥—É—é—â–∏–µ –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ '{faculty.title}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–æ–¥—è—â–∏—Ö' –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ Google Sheets.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="faculty|back")]
                ])
            )
            await callback.answer()
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö –ø–æ —Ç–∏–ø—É –æ–ø—ã—Ç–∞
        opyt_interviewers = [i for i in interviewers if i.experience_kind == SheetKind.OPYT]
        ne_opyt_interviewers = [i for i in interviewers if i.experience_kind == SheetKind.NE_OPYT]

        text = f"üë• –°–æ–±–µ—Å–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ '{faculty.title}':\n\n"
        
        if opyt_interviewers:
            text += "üìö –° –æ–ø—ã—Ç–æ–º:\n"
            for interviewer in opyt_interviewers:
                status = "‚úÖ" if interviewer.tg_id else "‚è≥"
                text += f"{status} {interviewer.tab_name}\n"
            text += "\n"
        
        if ne_opyt_interviewers:
            text += "üìñ –ë–µ–∑ –æ–ø—ã—Ç–∞:\n"
            for interviewer in ne_opyt_interviewers:
                status = "‚úÖ" if interviewer.tg_id else "‚è≥"
                text += f"{status} {interviewer.tab_name}\n"

        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö
        unregistered = [i for i in interviewers if not i.tg_id]
        if unregistered:
            buttons.append([InlineKeyboardButton(
                text="üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö",
                callback_data=f"create_interviewer_links|{faculty_id}"
            )])
        
        buttons.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"interviewers_faculty|{faculty_id}")])
        buttons.append([InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await callback.answer()

    @router.callback_query(F.data.startswith("create_interviewer_links|"))
    async def cb_create_interviewer_links(callback: CallbackQuery) -> None:
        faculty_id = int(callback.data.split("|")[1])
        
        async with sessionmaker() as session:
            interviewer_dao = InterviewerDAO(session)
            unregistered = await interviewer_dao.get_unregistered_by_faculty(faculty_id)

        if not unregistered:
            await callback.answer("–í—Å–µ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–µ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö
        links_text = "üîó –°—Å—ã–ª–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö:\n\n"
        
        for interviewer in unregistered:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Redis
            token = await redis_client.generate_invite_token(
                interviewer.id, 
                interviewer.faculty_id
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            async with sessionmaker() as session:
                from sqlalchemy import update
                await session.execute(
                    update(Interviewer)
                    .where(Interviewer.id == interviewer.id)
                    .values(invite_token=token)
                )
                await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
            me = await bot.get_me()
            bot_username = me.username
            invite_link = f"https://t.me/{bot_username}?start=inv_{token}"
            
            links_text += f"üë§ {interviewer.tab_name} ({interviewer.experience_kind.value}):\n{invite_link}\n\n"

        await callback.message.answer(links_text)
        await callback.answer("–°—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω—ã!")


    return router
