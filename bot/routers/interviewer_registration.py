from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.dao import InterviewerDAO
from database.engine import sessionmaker
from services.redis_client import RedisClient


class InterviewerRegistrationStates(StatesGroup):
    waiting_name_confirmation = State()


def setup_interviewer_registration_router(redis_client: RedisClient) -> Router:
    router = Router()

    @router.message(CommandStart())
    async def handle_start_command(message: Message, state: FSMContext) -> None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ
        if len(message.text.split()) > 1:
            start_param = message.text.split()[1]
            if start_param.startswith("inv_"):
                token = start_param[4:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "inv_"
                await handle_interviewer_invite(message, token, state)
                return

        # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π!\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )

    async def handle_interviewer_invite(message: Message, token: str, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ –ø–æ —Ç–æ–∫–µ–Ω—É"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–∑ Redis
        invite_data = await redis_client.get_invite_data(token)
        
        if not invite_data:
            await message.answer(
                "‚ùå –°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∑–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ
        if invite_data.get("type") != "interviewer_invite":
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        async with sessionmaker() as session:
            interviewer_dao = InterviewerDAO(session)
            existing_interviewer = await interviewer_dao.get_by_telegram_id(message.from_user.id)
            
            if existing_interviewer:
                await message.answer(
                    f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–π!\n"
                    f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {existing_interviewer.faculty.title}\n"
                    f"–¢–∏–ø: {existing_interviewer.experience_kind.value}"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ –ø–æ ID –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            interviewer = await interviewer_dao.get_by_invite_token(token)
            
            if not interviewer:
                await message.answer("‚ùå –°–æ–±–µ—Å–µ–¥—É—é—â–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–π
            if interviewer.tg_id:
                await message.answer(
                    "‚ùå –≠—Ç–æ—Ç —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–π —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
                )
                return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(
            token=token,
            interviewer_id=interviewer.id,
            faculty_title=interviewer.faculty.title,
            tab_name=interviewer.tab_name,
            experience_kind=interviewer.experience_kind.value
        )

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        await state.set_state(InterviewerRegistrationStates.waiting_name_confirmation)
        await message.answer(
            f"üîç –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"üë§ –ò–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ: {interviewer.tab_name}\n"
            f"üè´ –§–∞–∫—É–ª—å—Ç–µ—Ç: {interviewer.faculty.title}\n"
            f"üìö –¢–∏–ø —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π: {interviewer.experience_kind.value}\n\n"
            f"–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_interviewer_registration")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_interviewer_registration")]
            ])
        )

    @router.callback_query(F.data == "confirm_interviewer_registration")
    async def confirm_interviewer_registration(callback, state: FSMContext) -> None:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ"""
        data = await state.get_data()
        token = data["token"]
        interviewer_id = data["interviewer_id"]
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ
        async with sessionmaker() as session:
            interviewer_dao = InterviewerDAO(session)
            interviewer = await interviewer_dao.register_telegram_user(
                token,
                callback.from_user.id,
                callback.from_user.username
            )

        if interviewer:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Redis
            await redis_client.delete_invite_token(token)
            
            await callback.message.edit_text(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ–±–µ—Å–µ–¥—É—é—â–∏–π!\n\n"
                f"üë§ –ò–º—è: {interviewer.tab_name}\n"
                f"üè´ –§–∞–∫—É–ª—å—Ç–µ—Ç: {interviewer.faculty.title}\n"
                f"üìö –¢–∏–ø —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π: {interviewer.experience_kind.value}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∞—à–µ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞."
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

        await state.clear()
        await callback.answer()

    @router.callback_query(F.data == "cancel_interviewer_registration")
    async def cancel_interviewer_registration(callback, state: FSMContext) -> None:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–æ–±–µ—Å–µ–¥—É—é—â–µ–≥–æ"""
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞."
        )
        await callback.answer()

    return router
