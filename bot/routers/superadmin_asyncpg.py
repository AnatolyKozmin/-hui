"""
–°—É–ø–µ—Ä–∞–¥–º–∏–Ω —Ä–æ—É—Ç–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π asyncpg –∏ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
"""

import asyncio
import os
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.redis_client import RedisClient
from services.gspread_client import GSpreadClient


class SuperAdminStates(StatesGroup):
    waiting_faculty_name = State()
    waiting_faculty_description = State()
    waiting_sheet_link = State()
    waiting_faculty_for_sheet = State()
    waiting_sheet_type = State()
    waiting_admin_telegram_id = State()
    waiting_admin_name = State()
    waiting_admin_faculty = State()


def get_superadmin_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèõÔ∏è –§–∞–∫—É–ª—å—Ç–µ—Ç—ã"), KeyboardButton(text="üëë –ê–¥–º–∏–Ω—ã")],
            [KeyboardButton(text="üìä Google Sheets"), KeyboardButton(text="üîç –¢–µ—Å—Ç –ë–î")],
            [KeyboardButton(text="üìà –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )


def get_faculties_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤")],
            [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"), KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )


def get_admins_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")],
            [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"), KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )


def get_sheets_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Google Sheets"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîó –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü")],
            [KeyboardButton(text="üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"), KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )


class SuperAdminRouter:
    def __init__(self, db_pool, redis_client: RedisClient, gs_client: GSpreadClient):
        self.db_pool = db_pool
        self.redis_client = redis_client
        self.gs_client = gs_client
        self.router = Router()
        self.superadmin_id = int(os.getenv("SUPERADMIN_ID", "0"))
        self.setup_handlers()
    
    def is_superadmin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º"""
        return user_id == self.superadmin_id
    
    async def check_superadmin(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤"""
        if not self.is_superadmin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞!")
            return False
        return True
    
    async def test_database(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.db_pool:
            return False
            
        try:
            async with self.db_pool.acquire() as conn:
                result = await conn.fetchval("SELECT 1")
                return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    async def get_faculties_count(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤"""
        if not self.db_pool:
            return 0
            
        try:
            async with self.db_pool.acquire() as conn:
                count = await conn.fetchval("SELECT COUNT(*) FROM faculties")
                return count or 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤: {e}")
            return 0
    
    async def get_admins_count(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤"""
        if not self.db_pool:
            return 0
            
        try:
            async with self.db_pool.acquire() as conn:
                count = await conn.fetchval("SELECT COUNT(*) FROM faculty_admins")
                return count or 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–¥–º–∏–Ω–æ–≤: {e}")
            return 0
    
    async def cmd_superadmin(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
        if not await self.check_superadmin(message):
            return
            
        text = (
            "üëë –ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            "‚Ä¢ üèõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏\n"
            "‚Ä¢ üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n"
            "‚Ä¢ üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets\n"
            "‚Ä¢ üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await message.answer(text, reply_markup=get_superadmin_keyboard())
    
    async def cmd_faculties(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏"""
        if not await self.check_superadmin(message):
            return
            
        count = await self.get_faculties_count()
        text = (
            f"üèõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏\n\n"
            f"üìä –í—Å–µ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤: {count}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await message.answer(text, reply_markup=get_faculties_keyboard())
    
    async def cmd_admins(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏"""
        if not await self.check_superadmin(message):
            return
            
        count = await self.get_admins_count()
        text = (
            f"üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n"
            f"üìä –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: {count}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await message.answer(text, reply_markup=get_admins_keyboard())
    
    async def cmd_assign_admin(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
        if not await self.check_superadmin(message):
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã
        if not self.db_pool:
            await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", reply_markup=get_admins_keyboard())
            return
        
        try:
            async with self.db_pool.acquire() as conn:
                faculties = await conn.fetch("SELECT id, title FROM faculties ORDER BY title")
                
                if not faculties:
                    await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã", reply_markup=get_admins_keyboard())
                    return
                
                text = (
                    "üëë –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                    "üì± –í–≤–µ–¥–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
                )
                
                await message.answer(text, reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                ))
                await state.set_state(SuperAdminStates.waiting_admin_telegram_id)
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=get_admins_keyboard())
    
    async def cmd_list_admins(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤"""
        if not await self.check_superadmin(message):
            return
            
        if not self.db_pool:
            text = "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        else:
            try:
                async with self.db_pool.acquire() as conn:
                    admins = await conn.fetch("""
                        SELECT fa.id, fa.telegram_user_id, f.title as faculty_name
                        FROM faculty_admins fa
                        JOIN faculties f ON fa.faculty_id = f.id
                        ORDER BY f.title
                    """)
                    
                    if admins:
                        text = "üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
                        for i, admin in enumerate(admins, 1):
                            text += f"{i}. Telegram ID: {admin['telegram_user_id']}\n"
                            text += f"   üèõÔ∏è –§–∞–∫—É–ª—å—Ç–µ—Ç: {admin['faculty_name']}\n"
                            text += f"   üì± ID: {admin['telegram_user_id']}\n\n"
                    else:
                        text = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            except Exception as e:
                text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: {e}"
        
        await message.answer(text, reply_markup=get_admins_keyboard())
    
    async def cmd_sheets(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Google Sheets"""
        if not await self.check_superadmin(message):
            return
            
        text = (
            "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Google Sheets\n\n"
            "–§—É–Ω–∫—Ü–∏–∏:\n"
            "‚Ä¢ üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–∞–±–ª–∏—Ü—ã\n"
            "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü\n"
            "‚Ä¢ üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
            "‚Ä¢ üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await message.answer(text, reply_markup=get_sheets_keyboard())
    
    async def cmd_test_db(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not await self.check_superadmin(message):
            return
            
        if await self.test_database():
            text = (
                "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
                "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç.\n"
                "–°—Ç–∞—Ç—É—Å: üü¢ –ê–∫—Ç–∏–≤–Ω–æ"
            )
        else:
            text = (
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n"
                "–°—Ç–∞—Ç—É—Å: üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            )
        
        await message.answer(text, reply_markup=get_superadmin_keyboard())
    
    async def cmd_status(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        if not await self.check_superadmin(message):
            return
            
        db_status = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if await self.test_database() else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        faculties_count = await self.get_faculties_count()
        admins_count = await self.get_admins_count()
        
        text = (
            "üìà –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
            f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}\n"
            f"üèõÔ∏è –§–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤: {faculties_count}\n"
            f"üëë –ê–¥–º–∏–Ω–æ–≤: {admins_count}\n"
            "ü§ñ –ë–æ—Ç: üü¢ –†–∞–±–æ—Ç–∞–µ—Ç\n"
            "üê≥ Docker: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n"
            "üîå Redis: üü¢ –î–æ—Å—Ç—É–ø–µ–Ω\n\n"
            "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!"
        )
        
        await message.answer(text, reply_markup=get_superadmin_keyboard())
    
    async def cmd_create_faculty(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"""
        if not await self.check_superadmin(message):
            return
            
        text = (
            "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:"
        )
        
        await message.answer(text, reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            one_time_keyboard=True
        ))
        await state.set_state(SuperAdminStates.waiting_faculty_name)
    
    async def cmd_list_faculties(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤"""
        if not await self.check_superadmin(message):
            return
            
        if not self.db_pool:
            text = "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        else:
            try:
                async with self.db_pool.acquire() as conn:
                    faculties = await conn.fetch("SELECT title, description FROM faculties ORDER BY title")
                    
                    if faculties:
                        text = "üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤:\n\n"
                        for i, faculty in enumerate(faculties, 1):
                            text += f"{i}. {faculty['title']}\n"
                            if faculty['description']:
                                text += f"   üìÑ {faculty['description']}\n"
                            text += "\n"
                    else:
                        text = "üìã –§–∞–∫—É–ª—å—Ç–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            except Exception as e:
                text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤: {e}"
        
        await message.answer(text, reply_markup=get_faculties_keyboard())
    
    async def cmd_add_sheet_link(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ Google Sheet"""
        if not await self.check_superadmin(message):
            return
            
        text = (
            "üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Google Sheet\n\n"
            "üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É:"
        )
        
        await message.answer(text, reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            one_time_keyboard=True
        ))
        await state.set_state(SuperAdminStates.waiting_sheet_link)
    
    async def cmd_test_sheets(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Sheets"""
        if not await self.check_superadmin(message):
            return
            
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
            test_result = await self.gs_client.test_connection()
            if test_result:
                text = (
                    "‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
                    "API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç.\n"
                    "–°—Ç–∞—Ç—É—Å: üü¢ –ê–∫—Ç–∏–≤–Ω–æ"
                )
            else:
                text = (
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets!\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ credentials.\n"
                    "–°—Ç–∞—Ç—É—Å: üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                )
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Sheets: {e}"
        
        await message.answer(text, reply_markup=get_sheets_keyboard())
    
    async def cmd_back_to_superadmin(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É"""
        await self.cmd_superadmin(message)
    
    async def cmd_back_to_main(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        from bot.routers.common_asyncpg import get_main_menu_kb
        text = (
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:"
        )
        await message.answer(text, reply_markup=get_main_menu_kb())
    
    async def process_faculty_name(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"""
        if not await self.check_superadmin(message):
            return
            
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_faculties_keyboard())
            return
        
        faculty_name = message.text.strip()
        if not faculty_name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        await state.update_data(faculty_name=faculty_name)
        
        text = (
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {faculty_name}\n\n"
            "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        )
        
        await message.answer(text)
        await state.set_state(SuperAdminStates.waiting_faculty_description)
    
    async def process_faculty_description(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"""
        if not await self.check_superadmin(message):
            return
            
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_faculties_keyboard())
            return
        
        data = await state.get_data()
        faculty_name = data.get('faculty_name')
        faculty_description = message.text.strip() if message.text.strip() != '-' else None
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            if not self.db_pool:
                await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", reply_markup=get_faculties_keyboard())
                await state.clear()
                return
            
            async with self.db_pool.acquire() as conn:
                faculty_id = await conn.fetchval("""
                    INSERT INTO faculties (slug, title, description) 
                    VALUES ($1, $2, $3)
                    RETURNING id
                """, f"faculty-{faculty_name.lower().replace(' ', '-')}", faculty_name, faculty_description)
                
                text = (
                    f"‚úÖ –§–∞–∫—É–ª—å—Ç–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {faculty_name}\n"
                    f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {faculty_description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üÜî ID: {faculty_id}"
                )
                
                await message.answer(text, reply_markup=get_faculties_keyboard())
                
        except Exception as e:
            if "unique constraint" in str(e).lower():
                text = f"‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{faculty_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
            else:
                text = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞: {e}"
            await message.answer(text, reply_markup=get_faculties_keyboard())
        
        await state.clear()
    
    async def process_sheet_link(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Google Sheet"""
        if not await self.check_superadmin(message):
            return
            
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_sheets_keyboard())
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets
        if "docs.google.com/spreadsheets" not in message.text:
            await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å—Å—ã–ª–∫–∏
        try:
            sheet_id = message.text.split("/d/")[1].split("/")[0]
        except:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        await state.update_data(sheet_link=message.text, sheet_id=sheet_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
        if not self.db_pool:
            await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", reply_markup=get_sheets_keyboard())
            await state.clear()
            return
        
        try:
            async with self.db_pool.acquire() as conn:
                faculties = await conn.fetch("SELECT id, title FROM faculties ORDER BY title")
                
                if not faculties:
                    await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã", reply_markup=get_sheets_keyboard())
                    await state.clear()
                    return
                
                text = "üèõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:\n\n"
                for i, faculty in enumerate(faculties, 1):
                    text += f"{i}. {faculty['title']}\n"
                
                await message.answer(text)
                await state.set_state(SuperAdminStates.waiting_faculty_for_sheet)
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤: {e}", reply_markup=get_sheets_keyboard())
            await state.clear()
    
    async def process_faculty_for_sheet(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã"""
        if not await self.check_superadmin(message):
            return
            
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_sheets_keyboard())
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
        try:
            async with self.db_pool.acquire() as conn:
                faculties = await conn.fetch("SELECT id, title FROM faculties ORDER BY title")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                faculty = None
                try:
                    faculty_num = int(message.text)
                    if 1 <= faculty_num <= len(faculties):
                        faculty = faculties[faculty_num - 1]
                except ValueError:
                    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    for f in faculties:
                        if f['title'].lower() == message.text.lower():
                            faculty = f
                            break
                
                if not faculty:
                    await message.answer("‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
                await state.update_data(faculty_id=faculty['id'], faculty_name=faculty['title'])
                
                text = (
                    f"üèõÔ∏è –§–∞–∫—É–ª—å—Ç–µ—Ç: {faculty['title']}\n\n"
                    "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã:\n"
                    "1. ne_opyt - –ë–µ–∑ –æ–ø—ã—Ç–∞\n"
                    "2. opyt - –° –æ–ø—ã—Ç–æ–º\n"
                    "3. svod - –°–≤–æ–¥–Ω–∞—è"
                )
                
                await message.answer(text)
                await state.set_state(SuperAdminStates.waiting_sheet_type)
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=get_sheets_keyboard())
            await state.clear()
    
    async def process_sheet_type(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–∞–±–ª–∏—Ü—ã"""
        if not await self.check_superadmin(message):
            return
            
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_sheets_keyboard())
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã
        sheet_types = {
            "1": "ne_opyt",
            "2": "opyt", 
            "3": "svod",
            "ne_opyt": "ne_opyt",
            "opyt": "opyt",
            "svod": "svod"
        }
        
        sheet_type = sheet_types.get(message.text.lower())
        if not sheet_type:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã. –í—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3:")
            return
        
        data = await state.get_data()
        faculty_id = data.get('faculty_id')
        faculty_name = data.get('faculty_name')
        sheet_id = data.get('sheet_id')
        sheet_link = data.get('sheet_link')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            async with self.db_pool.acquire() as conn:
                await conn.execute("""
                    INSERT INTO faculty_sheets (faculty_id, kind, spreadsheet_id, sheet_name)
                    VALUES ($1, $2, $3, $4)
                    ON CONFLICT (faculty_id, kind) 
                    DO UPDATE SET spreadsheet_id = EXCLUDED.spreadsheet_id, sheet_name = EXCLUDED.sheet_name
                """, faculty_id, sheet_type, sheet_id, sheet_type)
                
                text = (
                    f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"üèõÔ∏è –§–∞–∫—É–ª—å—Ç–µ—Ç: {faculty_name}\n"
                    f"üìä –¢–∏–ø: {sheet_type}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {sheet_link}"
                )
                
                await message.answer(text, reply_markup=get_sheets_keyboard())
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}", reply_markup=get_sheets_keyboard())
        
        await state.clear()
    
    async def process_admin_telegram_id(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ Telegram ID –∞–¥–º–∏–Ω–∞"""
        if not await self.check_superadmin(message):
            return
            
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer("‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admins_keyboard())
            return
        
        try:
            telegram_id = int(message.text.strip())
            if telegram_id <= 0:
                await message.answer("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        try:
            async with self.db_pool.acquire() as conn:
                existing_admin = await conn.fetchval(
                    "SELECT id FROM faculty_admins WHERE telegram_user_id = $1", 
                    telegram_id
                )
                
                if existing_admin:
                    await message.answer(
                        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
                        reply_markup=get_admins_keyboard()
                    )
                    await state.clear()
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID
                await state.update_data(telegram_id=telegram_id)
                
                text = (
                    f"üì± Telegram ID: {telegram_id}\n\n"
                    "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
                )
                
                await message.answer(text)
                await state.set_state(SuperAdminStates.waiting_admin_name)
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=get_admins_keyboard())
            await state.clear()
    
    async def process_admin_name(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞"""
        if not await self.check_superadmin(message):
            return
            
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer("‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admins_keyboard())
            return
        
        admin_name = message.text.strip()
        if not admin_name:
            await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
        await state.update_data(admin_name=admin_name)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
        try:
            async with self.db_pool.acquire() as conn:
                faculties = await conn.fetch("SELECT id, title FROM faculties ORDER BY title")
                
                text = f"üë§ –ò–º—è: {admin_name}\n\nüèõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:\n\n"
                for i, faculty in enumerate(faculties, 1):
                    text += f"{i}. {faculty['title']}\n"
                
                await message.answer(text)
                await state.set_state(SuperAdminStates.waiting_admin_faculty)
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤: {e}", reply_markup=get_admins_keyboard())
            await state.clear()
    
    async def process_admin_faculty(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        if not await self.check_superadmin(message):
            return
            
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer("‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admins_keyboard())
            return
        
        try:
            async with self.db_pool.acquire() as conn:
                faculties = await conn.fetch("SELECT id, title FROM faculties ORDER BY title")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                faculty = None
                try:
                    faculty_num = int(message.text)
                    if 1 <= faculty_num <= len(faculties):
                        faculty = faculties[faculty_num - 1]
                except ValueError:
                    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    for f in faculties:
                        if f['title'].lower() == message.text.lower():
                            faculty = f
                            break
                
                if not faculty:
                    await message.answer("‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                data = await state.get_data()
                telegram_id = data.get('telegram_id')
                admin_name = data.get('admin_name')
                
                # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                admin_id = await conn.fetchval("""
                    INSERT INTO faculty_admins (faculty_id, telegram_user_id) 
                    VALUES ($1, $2)
                    RETURNING id
                """, faculty['id'], telegram_id)
                
                text = (
                    f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"üë§ –ò–º—è: {admin_name}\n"
                    f"üì± Telegram ID: {telegram_id}\n"
                    f"üèõÔ∏è –§–∞–∫—É–ª—å—Ç–µ—Ç: {faculty['title']}\n"
                    f"üÜî ID: {admin_id}"
                )
                
                await message.answer(text, reply_markup=get_admins_keyboard())
                
        except Exception as e:
            if "unique constraint" in str(e).lower():
                await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=get_admins_keyboard())
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}", reply_markup=get_admins_keyboard())
        
        await state.clear()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
        self.router.message.register(self.cmd_superadmin, F.text == "üëë –°—É–ø–µ—Ä–∞–¥–º–∏–Ω")
        self.router.message.register(self.cmd_faculties, F.text == "üèõÔ∏è –§–∞–∫—É–ª—å—Ç–µ—Ç—ã")
        self.router.message.register(self.cmd_admins, F.text == "üëë –ê–¥–º–∏–Ω—ã")
        self.router.message.register(self.cmd_sheets, F.text == "üìä Google Sheets")
        self.router.message.register(self.cmd_test_db, F.text == "üîç –¢–µ—Å—Ç –ë–î")
        self.router.message.register(self.cmd_status, F.text == "üìà –°—Ç–∞—Ç—É—Å")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏
        self.router.message.register(self.cmd_create_faculty, F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
        self.router.message.register(self.cmd_list_faculties, F.text == "üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
        self.router.message.register(self.cmd_assign_admin, F.text == "‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞")
        self.router.message.register(self.cmd_list_admins, F.text == "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Google Sheets
        self.router.message.register(self.cmd_add_sheet_link, F.text == "üîó –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É")
        self.router.message.register(self.cmd_test_sheets, F.text == "üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        
        # FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
        self.router.message.register(self.process_faculty_name, SuperAdminStates.waiting_faculty_name)
        self.router.message.register(self.process_faculty_description, SuperAdminStates.waiting_faculty_description)
        
        # FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
        self.router.message.register(self.process_admin_telegram_id, SuperAdminStates.waiting_admin_telegram_id)
        self.router.message.register(self.process_admin_name, SuperAdminStates.waiting_admin_name)
        self.router.message.register(self.process_admin_faculty, SuperAdminStates.waiting_admin_faculty)
        
        # FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Google Sheets
        self.router.message.register(self.process_sheet_link, SuperAdminStates.waiting_sheet_link)
        self.router.message.register(self.process_faculty_for_sheet, SuperAdminStates.waiting_faculty_for_sheet)
        self.router.message.register(self.process_sheet_type, SuperAdminStates.waiting_sheet_type)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        self.router.message.register(self.cmd_back_to_superadmin, F.text == "üîô –ù–∞–∑–∞–¥ –∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É")
        self.router.message.register(self.cmd_back_to_main, F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    def get_router(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä"""
        return self.router


def setup_superadmin_router(db_pool, redis_client: RedisClient, gs_client: GSpreadClient):
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
    superadmin_router = SuperAdminRouter(db_pool, redis_client, gs_client)
    return superadmin_router.get_router()
