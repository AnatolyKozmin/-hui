#!/usr/bin/env python3
"""
–¢–µ—Å—Ç asyncpg –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
"""

import asyncio
import os
from dotenv import load_dotenv

load_dotenv()


async def test_asyncpg_direct():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ asyncpg"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ asyncpg...")
    
    try:
        import asyncpg
        print("‚úÖ asyncpg –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        database_url = os.getenv("DATABASE_URL", "asyncpg+postgresql://otb:1234@postgres:5432/otb_db")
        print(f"URL: {database_url}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º URL –¥–ª—è asyncpg
        asyncpg_url = database_url.replace("asyncpg+", "")
        print(f"AsyncPG URL: {asyncpg_url}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        conn = await asyncpg.connect(asyncpg_url)
        print("‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ asyncpg —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        result = await conn.fetchval("SELECT 1")
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: {result}")
        
        await conn.close()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


async def test_sqlalchemy_async():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SQLAlchemy —Å asyncpg"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQLAlchemy —Å asyncpg...")
    
    try:
        from sqlalchemy.ext.asyncio import create_async_engine
        print("‚úÖ create_async_engine –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        database_url = os.getenv("DATABASE_URL", "asyncpg+postgresql://otb:1234@postgres:5432/otb_db")
        print(f"URL: {database_url}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–≤–∏–∂–æ–∫
        engine = create_async_engine(database_url, echo=True)
        print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Å–æ–∑–¥–∞–Ω!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async with engine.begin() as conn:
            result = await conn.execute("SELECT 1")
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ SQLAlchemy –≤—ã–ø–æ–ª–Ω–µ–Ω: {result.scalar()}")
        
        await engine.dispose()
        print("‚úÖ –î–≤–∏–∂–æ–∫ –∑–∞–∫—Ä—ã—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SQLAlchemy: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_sqlalchemy_sync():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π SQLAlchemy —Å psycopg2"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ SQLAlchemy —Å psycopg2...")
    
    try:
        from sqlalchemy import create_engine
        print("‚úÖ create_engine –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º psycopg2 –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        sync_url = "postgresql+psycopg2://otb:1234@postgres:5432/otb_db"
        print(f"Sync URL: {sync_url}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–≤–∏–∂–æ–∫
        engine = create_engine(sync_url, echo=True)
        print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Å–æ–∑–¥–∞–Ω!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with engine.begin() as conn:
            result = conn.execute("SELECT 1")
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π SQLAlchemy –≤—ã–ø–æ–ª–Ω–µ–Ω: {result.scalar()}")
        
        engine.dispose()
        print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∑–∞–∫—Ä—ã—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ SQLAlchemy: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ asyncpg –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ\n")
    
    tests = [
        ("–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ asyncpg", test_asyncpg_direct),
        ("SQLAlchemy async", test_sqlalchemy_async),
        ("SQLAlchemy sync", test_sqlalchemy_sync),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ASYNCPG –í DOCKER")
    print("="*60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:.<40} {status}")
        if result:
            passed += 1
    
    print("="*60)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(results)}")
    
    if passed > 0:
        print("üéâ –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        if results[0][1]:  # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            print("‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("üí° –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ SQLAlchemy")
        if results[2][1]:  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π SQLAlchemy —Ä–∞–±–æ—Ç–∞–µ—Ç
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π SQLAlchemy —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("üí° –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π SQLAlchemy –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π")
    else:
        print("‚ùå –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")


if __name__ == "__main__":
    asyncio.run(main())
