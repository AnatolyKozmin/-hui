#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –ø—Ä—è–º—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ asyncpg
"""

import asyncio
import os
import json
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

load_dotenv()


class SimpleBot:
    def __init__(self):
        self.bot = Bot(token=os.getenv("TOKEN"))
        self.dp = Dispatcher()
        self.db_pool = None
        
    async def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import asyncpg
            
            # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            database_url = os.getenv("DATABASE_URL", "asyncpg+postgresql://otb:1234@postgres:5432/otb_db")
            asyncpg_url = database_url.replace("asyncpg+", "")
            
            # –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            self.db_pool = await asyncpg.create_pool(
                asyncpg_url,
                min_size=1,
                max_size=10
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    async def close_database(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self.db_pool:
            await self.db_pool.close()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def test_database(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.db_pool:
            return False
            
        try:
            async with self.db_pool.acquire() as conn:
                result = await conn.fetchval("SELECT 1")
                print(f"‚úÖ –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {result}")
                return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def get_main_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîç –¢–µ—Å—Ç –ë–î"), KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
                [KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"), KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
    
    async def start_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await message.answer(
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!\n\n"
            "–≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –ø—Ä—è–º—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ PostgreSQL —á–µ—Ä–µ–∑ asyncpg.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=self.get_main_keyboard()
        )
    
    async def test_db_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if await self.test_database():
            text = "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n" \
                   "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç.\n\n" \
                   "–°—Ç–∞—Ç—É—Å: üü¢ –ê–∫—Ç–∏–≤–Ω–æ"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n" \
                   "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n" \
                   "–°—Ç–∞—Ç—É—Å: üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        
        await message.answer(text, reply_markup=self.get_main_keyboard())
    
    async def info_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        text = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n" \
               "ü§ñ –í–µ—Ä—Å–∏—è: –ü—Ä–æ—Å—Ç–∞—è (asyncpg)\n" \
               "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL\n" \
               "üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –ü—Ä—è–º–æ–µ —á–µ—Ä–µ–∑ asyncpg\n" \
               "üê≥ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: Docker\n" \
               "üì± –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞\n\n" \
               "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        
        await message.answer(text, reply_markup=self.get_main_keyboard())
    
    async def restart_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        status_msg = await message.answer(
            "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=None
        )
        
        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await self.close_database()
        success = await self.init_database()
        
        if success:
            text = "‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n" \
                   "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\n" \
                   "–°—Ç–∞—Ç—É—Å: üü¢ –ê–∫—Ç–∏–≤–Ω–æ"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!\n\n" \
                   "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n" \
                   "–°—Ç–∞—Ç—É—Å: üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        
        await status_msg.edit_text(text)
        await message.answer("–ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", reply_markup=self.get_main_keyboard())
    
    async def status_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞"""
        db_status = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if await self.test_database() else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        
        text = "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n" \
               f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}\n" \
               "ü§ñ –ë–æ—Ç: üü¢ –†–∞–±–æ—Ç–∞–µ—Ç\n" \
               "üê≥ Docker: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n" \
               "üîå Redis: üü¢ –î–æ—Å—Ç—É–ø–µ–Ω\n\n" \
               "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!"
        
        await message.answer(text, reply_markup=self.get_main_keyboard())
    
    async def unknown_message(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await message.answer(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=self.get_main_keyboard()
        )
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.start_command, Command("start"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message.register(self.test_db_handler, lambda m: m.text == "üîç –¢–µ—Å—Ç –ë–î")
        self.dp.message.register(self.info_handler, lambda m: m.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        self.dp.message.register(self.restart_handler, lambda m: m.text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
        self.dp.message.register(self.status_handler, lambda m: m.text == "üìä –°—Ç–∞—Ç—É—Å")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
        self.dp.message.register(self.unknown_message)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞ —Å asyncpg...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if not await self.init_database():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.setup_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        try:
            print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            await self.close_database()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await self.close_database()
        await self.bot.session.close()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = SimpleBot()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.stop()


if __name__ == "__main__":
    asyncio.run(main())
