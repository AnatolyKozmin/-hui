#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import os
import sys
from dotenv import load_dotenv
import asyncpg

load_dotenv()


async def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    database_url = os.getenv("DATABASE_URL", "asyncpg+postgresql://otb:1234@postgres:5432/otb_db")
    asyncpg_url = database_url.replace("asyncpg+", "")
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print(f"URL: {asyncpg_url}")
    
    try:
        conn = await asyncpg.connect(asyncpg_url)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"  ‚úÖ {table['table_name']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
        
        # –§–∞–∫—É–ª—å—Ç–µ—Ç—ã
        faculties_count = await conn.fetchval("SELECT COUNT(*) FROM faculties")
        print(f"  üèõÔ∏è –§–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤: {faculties_count}")
        
        # –ê–¥–º–∏–Ω—ã
        admins_count = await conn.fetchval("SELECT COUNT(*) FROM faculty_admins")
        print(f"  üëë –ê–¥–º–∏–Ω–æ–≤: {admins_count}")
        
        # –õ–∏—Å—Ç—ã
        sheets_count = await conn.fetchval("SELECT COUNT(*) FROM faculty_sheets")
        print(f"  üìä –õ–∏—Å—Ç–æ–≤: {sheets_count}")
        
        # –°–æ–±–µ—Å–µ–¥—É—é—â–∏–µ
        interviewers_count = await conn.fetchval("SELECT COUNT(*) FROM interviewers")
        print(f"  üë• –°–æ–±–µ—Å–µ–¥—É—é—â–∏—Ö: {interviewers_count}")
        
        # –£—á–∞—Å—Ç–Ω–∏–∫–∏
        participants_count = await conn.fetchval("SELECT COUNT(*) FROM participants")
        print(f"  üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}")
        
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    finally:
        await conn.close()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n")
    
    success = await check_database()
    
    if success:
        print("\nüéâ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        sys.exit(0)
    else:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•!")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
